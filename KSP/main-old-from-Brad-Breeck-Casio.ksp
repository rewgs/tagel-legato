//	===================================================================
//	NOTES
//	===================================================================

	// 	Compiled with SublimeKSP; result copied to main.txt.
	// 	Kontakt instrument is set to read main.txt from the Resources folder.

import "library.ksp"

on init

	//	===================================================================
	//	UI BOILERPLATE 
	//	===================================================================

	make_perfview
	set_ui_height_px( 494)	// wallpaper height of 562 - Kontakt header height of 68 = 494
	set_ui_width_px (1000)
	set_control_par_str($INST_WALLPAPER_ID, $CONTROL_PAR_PICTURE, "Casio_GUI_v3_resized")
	set_script_title("FX")



	//	===================================================================
	//	GLOBAL VARIABLES
	//	===================================================================

	declare const modifier_MIDI := 7874
	declare const modifier_million := 10000
	declare group



	//	===================================================================	//	notes:
	// 	UI FRONT-END														//	sliders are 35 px apart horitzontally
	//	===================================================================	//	groups of sliders (filter, amp) are 51 px apart horitzonally
																			//	labels must be 20 px fewer than their respective slider in order to be centered

	//	SLIDERS	=======================================
	// 				name, 						ID, 							min value,	max value,	default value, 	pos X,	pos Y,	picture, 					edit width,		edit height,	mouse behaviour				
	//	FX
	Create_Slider(	Delay_Slider,				Delay_Slider_ID,				0,			1000000,	     0,			213,	135,	"Jupiter8SmtKnob_40",		78,				250,			 -500)
	Create_Slider(	Reverb_Slider,				Reverb_Slider_ID,				0,			1000000,	     0,			293,	135,	"Jupiter8SmtKnob_40",		78,				250,			 -500)
	Create_Slider(	Bitcrush_Slider,			Bitcrush_Slider_ID,				0,			1000000,	     0,			213,	170,	"Jupiter8SmtKnob_40",		78,				250,			 -500)
	Create_Slider(	Distortion_Slider,			Distortion_Slider_ID,			0,			1000000,	     0,			293,	170,	"Jupiter8SmtKnob_40",		78,				250,			 -500)
	Create_Slider(	Chorus_Slider,				Chorus_Slider_ID,				0,			1000000,	     0,			213,	205,	"Jupiter8SmtKnob_40",		78,				250,			 -500)
	Create_Slider(	Phaser_Slider,				Phaser_Slider_ID,				0,			1000000,	     0,			293,	205,	"Jupiter8SmtKnob_40",		78,				250,			 -500)

	//	FILTERS
	Create_Slider(	Filter_LPF_Cut_Slider,		Filter_LPF_Cut_Slider_ID,		0,			1000000,	500000,			339,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)
	Create_Slider(	Filter_LPF_Res_Slider,		Filter_LPF_Res_Slider_ID,		0,			1000000,	500000,			373,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)
	Create_Slider(	Filter_HPF_Cut_Slider,		Filter_HPF_Cut_Slider_ID,		0,			1000000,	500000,			409,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)
	Create_Slider(	Filter_HPF_Res_Slider,		Filter_HPF_Res_Slider_ID,		0,			1000000,	500000,			443,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)

	//	ENVELOPE AMOUNTS
	Create_Slider(	Filter_LPF_Env_Amount,		Filter_LPF_Env_Amount_ID,		0,			1000000,	500000,			512,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)
	Create_Slider(	Filter_HPF_Env_Amount,		Filter_HPF_Env_Amount_ID,		0,			1000000,	500000,			547,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)
	Create_Slider(	Amp_Env_Amount,				Amp_Env_Amount_ID,				0,			1000000,	500000,			582,	135,	"Jupiter_8_Slider_Rev_4",	78,				250,			-1500)

	//	ENVELOPE
	Create_Slider( 	Env_A_Slider, 				Env_A_Slider_ID, 				0, 			1000000, 	500000, 		650, 	135, 	"Jupiter_8_Slider_Rev_4", 	78, 			250, 			-1500)
	Create_Slider( 	Env_D_Slider,  				Env_D_Slider_ID, 				0, 			1000000, 	500000, 		685, 	135, 	"Jupiter_8_Slider_Rev_4", 	78, 			250, 			-1500)
	Create_Slider( 	Env_S_Slider, 				Env_S_Slider_ID, 				0, 			1000000, 	500000, 		720, 	135, 	"Jupiter_8_Slider_Rev_4", 	78, 			250, 			-1500)
	Create_Slider( 	Env_R_Slider, 				Env_R_Slider_ID, 				0, 			1000000, 	500000, 		755, 	135, 	"Jupiter_8_Slider_Rev_4", 	78, 			250, 			-1500)


	Create_Label(	Filter_Meta_Label,				Filters_Meta_Label_ID,				10000,			1,				1,					372,			 90)

	Create_Label(	LPF_Meta_Label,					LPF_Meta_Label_ID,					10000,			1,				1,					337,			100)
	Create_Label(	Filter_LPF_Cut_Value_Label,		Filter_LPF_Cut_Value_Label_ID,			1,			1,				1,					319,			229)			
	Create_Label(	Filter_LPF_Res_Value_Label,		Filter_LPF_Res_Value_Label_ID,			1,			1,				1,					354,			229)			
	Create_Label(	Filter_LPF_Cut_Name_Label,		Filter_LPF_Cut_Name_Label_ID,			1,			1,				1,					319,			115)			
	Create_Label(	Filter_LPF_Res_Name_Label,		Filter_LPF_Res_Name_Label_ID,			1,			1,				1,					354,			115)			

	Create_Label(	HPF_Meta_Label,					HPF_Meta_Label_ID,					10000,			1,				1,					407,			100)
	Create_Label(	Filter_HPF_Cut_Value_Label,		Filter_HPF_Cut_Value_Label_ID,			1,			1,				1,					389,			229)			
	Create_Label(	Filter_HPF_Res_Value_Label,		Filter_HPF_Res_Value_Label_ID,			1,			1,				1,					424,			229)			
	Create_Label(	Filter_HPF_Cut_Name_Label,		Filter_HPF_Cut_Name_Label_ID,			1,			1,				1,					389,			115)			
	Create_Label(	Filter_HPF_Res_Name_Label,		Filter_HPF_Res_Name_Label_ID,			1,			1,				1,					424,			115)			

	//	ENVELOPES
	// Create_Label(   Envelopes_Meta_Label,			Envelopes_Meta_Label_ID,			10000,			1,				1,					598,			 90)

	// Create_Label( 	EnvFilter_Meta_Label,			EnvFilter_Meta_Label_ID,			10000, 			1, 				1, 					526, 			100)
	// Create_Label( 	EnvFilter_Value_Attack_Label,	EnvFilter_Value_Attack_Label_ID,	    1, 			1, 				1, 					474, 			229)
	// Create_Label( 	EnvFilter_Value_Decay_Label,	EnvFilter_Value_Decay_Label_ID,		    1, 			1, 				1, 					509, 			229)
	// Create_Label( 	EnvFilter_Value_Sustain_Label,	EnvFilter_Value_Sustain_Label_ID,	    1, 			1, 				1, 					544, 			229)
	// Create_Label( 	EnvFilter_Value_Release_Label,	EnvFilter_Value_Release_Label_ID,	    1, 			1, 				1, 					579, 			229)
	// Create_Label(	EnvFilter_Name_Attack_Label,	EnvFilter_Name_Attack_Label_ID,		    1,			1,				1,					474,			115)
	// Create_Label(	EnvFilter_Name_Decay_Label,		EnvFilter_Name_Decay_Label_ID,		    1,			1,				1,					509,			115)
	// Create_Label(	EnvFilter_Name_Sustain_Label,	EnvFilter_Name_Sustain_Label_ID,	    1,			1,				1,					544,			115)
	// Create_Label(	EnvFilter_Name_Release_Label,	EnvFilter_Name_Release_Label_ID,	    1,			1,				1,					579,			115)

	Create_Label( 	Env_Meta_Label,				Env_Meta_Label_ID,				10000, 			1, 				1, 					682, 			100)
	Create_Label( 	Env_A_Label_Value,		Env_A_Label_Value_ID,		    1, 			1, 				1, 					630, 			229)
	Create_Label( 	Env_D_Label_Value,		Env_D_Label_Value_ID,		    1, 			1, 				1, 					665, 			229)
	Create_Label( 	Env_Value_Sustain_Label,	Env_Value_Sustain_Label_ID,		    1, 			1, 				1, 					700, 			229)
	Create_Label( 	Env_Value_Release_Label,	Env_Value_Release_Label_ID,		    1, 			1, 				1, 					735, 			229)
	Create_Label(	Env_Name_Attack_Label,		Env_Name_Attack_Label_ID,		    1,			1,				1,					630,			115)
	Create_Label(	Env_Name_Decay_Label,		Env_Name_Decay_Label_ID,			1,			1,				1,					665,			115)
	Create_Label(	Env_Name_Sustain_Label,		Env_Name_Sustain_Label_ID,		    1,			1,				1,					700,			115)
	Create_Label(	Env_Name_Release_Label,		Env_Name_Release_Label_ID,		    1,			1,				1,					735,			115)

	//	SWITCHES =======================================
	//				name, 					ID, 						edit width, 	editheight, 	text alignment*, 	pos X, 		pos Y)		*note for alignment: 0 = left, 1 = centered, 2 = right
	// Create_Switch(	Filter_Mode_Switch,		Filter_Mode_Switch_ID,		60,				20,				1,					 27,		217)

	//	UI LABEL SETTINGS =======================================

	//	Effects
	// hide_part(Effects_Meta_Label,				$HIDE_PART_BG)
	// hide_part(Bitcrush_Name_Label, 				$HIDE_PART_BG)
	// hide_part(Bitcrush_Value_Label, 			$HIDE_PART_BG)
	// hide_part(Distortion_Name_Label, 			$HIDE_PART_BG)
	// hide_part(Distortion_Value_Label, 			$HIDE_PART_BG)
	// hide_part(Phaser_Name_Label, 				$HIDE_PART_BG)
	// hide_part(Phaser_Value_Label, 				$HIDE_PART_BG)
	// hide_part(Chorus_Name_Label, 				$HIDE_PART_BG)
	// hide_part(Chorus_Value_Label, 				$HIDE_PART_BG)
	// hide_part(Delay_Meta_Label,					$HIDE_PART_BG)
	// hide_part(Delay_Dry_Name_Label,				$HIDE_PART_BG)
	// hide_part(Delay_Dry_Value_Label,			$HIDE_PART_BG)
	// hide_part(Delay_Wet_Name_Label,				$HIDE_PART_BG)
	// hide_part(Delay_Wet_Value_Label,			$HIDE_PART_BG)
	// hide_part(Reverb_Meta_Label,				$HIDE_PART_BG)
	// hide_part(Reverb_Dry_Name_Label,			$HIDE_PART_BG)
	// hide_part(Reverb_Dry_Value_Label,			$HIDE_PART_BG)
	// hide_part(Reverb_Wet_Name_Label,			$HIDE_PART_BG)
	// hide_part(Reverb_Wet_Value_Label,			$HIDE_PART_BG)
	// set_text(Effects_Meta_Label,				"Effects")
	// set_text(Bitcrush_Name_Label, 				"Crush")
	// set_text(Bitcrush_Value_Label, 				Bitcrush_Slider / modifier_million)
	// set_text(Distortion_Name_Label, 			"Dist")
	// set_text(Distortion_Value_Label, 			Distortion_Slider / modifier_million)
	// set_text(Phaser_Name_Label, 				"Phase")
	// set_text(Phaser_Value_Label, 				Phaser_Slider / modifier_million)
	// set_text(Chorus_Name_Label, 				"Chorus")
	// set_text(Chorus_Value_Label, 				Chorus_Slider / modifier_million)
	// set_text(Delay_Meta_Label,					"Delay")
	// set_text(Delay_Dry_Name_Label,				"Dry")
	// set_text(Delay_Dry_Value_Label,				Delay_Dry_Slider / modifier_million)
	// set_text(Delay_Wet_Name_Label,				"Wet")
	// set_text(Delay_Wet_Value_Label,				Delay_Wet_Slider / modifier_million)
	// set_text(Reverb_Meta_Label,					"Reverb")
	// set_text(Reverb_Dry_Name_Label,				"Dry")
	// set_text(Reverb_Dry_Value_Label,			Reverb_Dry_Slider / modifier_million)
	// set_text(Reverb_Wet_Name_Label,				"Wet")
	// set_text(Reverb_Wet_Value_Label,			Reverb_Wet_Slider / modifier_million)

	//	Filters - OLD
	// hide_part(Filter_Meta_Label,				$HIDE_PART_BG)
	// hide_part(Filter_Cut_Value_Label,			$HIDE_PART_BG)
	// hide_part(Filter_Res_Value_Label,			$HIDE_PART_BG)
	// hide_part(Filter_Cut_Name_Label,			$HIDE_PART_BG)
	// hide_part(Filter_Res_Name_Label,			$HIDE_PART_BG)
	// hide_part(Filter_Mode_Switch,				$HIDE_PART_BG)
	// set_text(Filter_Meta_Label,					"Filter")
	// set_text(Filter_Cut_Name_Label,				"Cut")
	// set_text(Filter_Cut_Value_Label,			Filter_Cut_Slider / modifier_million)
	// set_text(Filter_Res_Name_Label,				"Res")
	// set_text(Filter_Res_Value_Label,			Filter_Res_Slider / modifier_million)
	// set_text(Filter_Mode_Switch, 				"LPF")

	//	Filters - NEW
	hide_part(Filter_Meta_Label,				$HIDE_PART_BG)
	set_text( Filter_Meta_Label,					"Filters")

	hide_part(LPF_Meta_Label,					$HIDE_PART_BG)
	set_text( LPF_Meta_Label,					"LPF")
	hide_part(Filter_LPF_Cut_Value_Label,		$HIDE_PART_BG)
	hide_part(Filter_LPF_Res_Value_Label,		$HIDE_PART_BG)
	hide_part(Filter_LPF_Cut_Name_Label,		$HIDE_PART_BG)
	hide_part(Filter_LPF_Res_Name_Label,		$HIDE_PART_BG)
	set_text( Filter_LPF_Cut_Value_Label,		Filter_LPF_Cut_Slider / modifier_million)
	set_text( Filter_LPF_Res_Value_Label,		Filter_LPF_Res_Slider / modifier_million)
	set_text( Filter_LPF_Cut_Name_Label,			"Cut")
	set_text( Filter_LPF_Res_Name_Label,			"Res")

	hide_part(HPF_Meta_Label,					$HIDE_PART_BG)
	set_text( HPF_Meta_Label,					"HPF")
	hide_part(Filter_HPF_Cut_Value_Label,		$HIDE_PART_BG)
	hide_part(Filter_HPF_Res_Value_Label,		$HIDE_PART_BG)
	hide_part(Filter_HPF_Cut_Name_Label,		$HIDE_PART_BG)
	hide_part(Filter_HPF_Res_Name_Label,		$HIDE_PART_BG)
	set_text( Filter_HPF_Cut_Value_Label,		Filter_HPF_Cut_Slider / modifier_million)
	set_text( Filter_HPF_Res_Value_Label,		Filter_HPF_Res_Slider / modifier_million)
	set_text( Filter_HPF_Cut_Name_Label,			"Cut")
	set_text( Filter_HPF_Res_Name_Label,			"Res")

	//	Envelopes
	// hide_part(Envelopes_Meta_Label,				$HIDE_PART_BG)
	// set_text(Envelopes_Meta_Label, 				"Envelopes")

	//	EnvFilter
	// hide_part(EnvFilter_Meta_Label, 			$HIDE_PART_BG)
	// hide_part(EnvFilter_Value_Attack_Label, 	$HIDE_PART_BG)
	// hide_part(EnvFilter_Value_Decay_Label, 		$HIDE_PART_BG)
	// hide_part(EnvFilter_Value_Sustain_Label,	$HIDE_PART_BG)
	// hide_part(EnvFilter_Value_Release_Label,	$HIDE_PART_BG)
	// hide_part(EnvFilter_Name_Attack_Label, 		$HIDE_PART_BG)
	// hide_part(EnvFilter_Name_Decay_Label, 		$HIDE_PART_BG)
	// hide_part(EnvFilter_Name_Sustain_Label,		$HIDE_PART_BG)
	// hide_part(EnvFilter_Name_Release_Label,		$HIDE_PART_BG)

	// set_text(EnvFilter_Meta_Label,				"Low Pass Filter")
	// set_text(EnvFilter_Value_Attack_Label,		EnvFilter_Attack_Slider / modifier_MIDI)
	// set_text(EnvFilter_Value_Decay_Label,		EnvFilter_Decay_Slider / modifier_MIDI + 1)
	// set_text(EnvFilter_Value_Sustain_Label,		EnvFilter_Sustain_Slider / modifier_MIDI + 1)
	// set_text(EnvFilter_Value_Release_Label, 	EnvFilter_Release_Slider / modifier_MIDI)
	// set_text(EnvFilter_Name_Attack_Label, 		"A")
	// set_text(EnvFilter_Name_Decay_Label, 		"D")
	// set_text(EnvFilter_Name_Sustain_Label,		"S")
	// set_text(EnvFilter_Name_Release_Label,		"R")

	//	Envelope
	hide_part(Env_Meta_Label, 				$HIDE_PART_BG)
	hide_part(Env_A_Label_Value, 		$HIDE_PART_BG)
	hide_part(Env_D_Label_Value, 		$HIDE_PART_BG)
	hide_part(Env_Value_Sustain_Label, 		$HIDE_PART_BG)
	hide_part(Env_Value_Release_Label, 		$HIDE_PART_BG)
	hide_part(Env_Name_Attack_Label, 		$HIDE_PART_BG)
	hide_part(Env_Name_Decay_Label, 		$HIDE_PART_BG)
	hide_part(Env_Name_Sustain_Label, 		$HIDE_PART_BG)
	hide_part(Env_Name_Release_Label, 		$HIDE_PART_BG)

	set_text(Env_Meta_Label, 				"ADSR")
	set_text(Env_A_Label_Value,		Env_A_Slider / modifier_MIDI)
	set_text(Env_D_Label_Value,			Env_D_Slider / modifier_MIDI + 1)
	set_text(Env_Value_Sustain_Label,		Env_S_Slider / modifier_MIDI + 1)
	set_text(Env_Value_Release_Label,		Env_R_Slider / modifier_MIDI)
	set_text(Env_Name_Attack_Label, 		"A")
	set_text(Env_Name_Decay_Label, 			"D")
	set_text(Env_Name_Sustain_Label,		"S")
	set_text(Env_Name_Release_Label,		"R")



	// 	===================================================================
	//	BACK END
	//	===================================================================

	//	EFFECTS INVOKATION =======================================
//	Create_Group_Filter(#type#, #subtype#, #slot#)
	Create_Group_Filter($EFFECT_TYPE_FILTER, $FILTER_TYPE_LDR_LP4, 0)		// low pass filter 		*need to make this modulate from the envelope via KSP!
	Create_Group_Filter($EFFECT_TYPE_FILTER, $FILTER_TYPE_LDR_HP4, 1)		// high pass filter 	*need to make this modulate from the envelope via KSP!

//	Instrument and Send FX
	// set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, -1, -1, $NI_MAIN_BUS)	// trying to load delay as first send effect...why isn't this working?
	Create_Group_FX($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, 2) 		// trying to load a Replika FX on the third slot of every group as a test, and this isn't working either...why?

	// set_engine_par($ENGINE_PAR_ENVELOPE_ORDER, 0, 0, -1)


	// 	INITIAL VALUES =======================================

	//	Effects
	// Bitcrush_Slider		:=       0
	// Distortion_Slider	:=       0
	// Phaser_Slider		:=       0
	// Chorus_Slider		:=       0
	// Delay_Wet_Slider	:=       0
	// Delay_Dry_Slider	:= 1000000
	// Reverb_Wet_Slider 	:=       0
	// Reverb_Dry_Slider	:= 1000000

	// 	Filter
	Filter_LPF_Cut_Slider 	:= 1000000
	Filter_LPF_Res_Slider 	:=       0
	Filter_HPF_Cut_Slider 	:= 		 0
	Filter_HPF_Res_Slider 	:=       0
	// Filter_Mode_Switch 	:=       0

	//	Envelope - Filter
	// EnvFilter_Attack_Slider  :=       0
	// EnvFilter_Decay_Slider 	 :=  500000
	// EnvFilter_Sustain_Slider :=  500000
	// EnvFilter_Release_Slider := 1000000

	//	Envelope - Amplifier
	Env_A_Slider 	 :=       0
	Env_D_Slider  	 :=  500000
	Env_S_Slider 	 :=  500000
	Env_R_Slider 	 := 1000000

end on


//	===================================================================
//	UI CONTROL
//	===================================================================

//	set_engine_par argument notes:
//		parameter, 
//		value (0 to 1,000,000 for sliders, 0 or 1 for switches), 
//		group (zero-based index; instrument-level is -1), 
//		slot (zero-based index; set to -1 for main fx), 
//		generic ($NI_SEND_BUS, $NI_INSERT_BUS, or $NI_MAIN_BUS)

//	Effects =======================================
// on ui_control(Bitcrush_Slider)
// 	set_text(Bitcrush_Value_Label, Bitcrush_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_BITS, Bitcrush_Slider, -1, 0, $NI_MAIN_BUS)
// end on

// on ui_control(Distortion_Slider)
// 	set_text(Distortion_Value_Label, Distortion_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_DRIVE, Distortion_Slider, -1, 1, $NI_MAIN_BUS)
// end on

// on ui_control(Phaser_Slider)
// 	set_text(Phaser_Value_Label, Phaser_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_PHASIS_MIX, Phaser_Slider, -1, 2, $NI_MAIN_BUS)
// end on

// on ui_control(Chorus_Slider)
// 	set_text(Chorus_Value_Label, Chorus_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_CHORAL_MIX, Chorus_Slider, -1, 3, $NI_MAIN_BUS)
// end on

// on ui_control(Delay_Wet_Slider)
// 	set_text(Delay_Wet_Value_Label, Delay_Wet_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, Delay_Wet_Slider, -1, 6, $NI_MAIN_BUS)		// probably will need modifier to get this fader to work right (only need highest value to equal 0, not 24 like in FX)
// end on

// on ui_control(Delay_Dry_Slider)
// 	set_text(Delay_Dry_Value_Label, Delay_Dry_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, Delay_Dry_Slider, -1, 6, $NI_MAIN_BUS)		// probably will need modifier to get this fader to work right (only need highest value to equal 0, not 24 like in FX)
// end on

// on ui_control(Reverb_Wet_Slider)
// 	set_text(Reverb_Wet_Value_Label, Reverb_Wet_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, Reverb_Wet_Slider, -1, 7, $NI_MAIN_BUS)		// probably will need modifier to get this fader to work right (only need highest value to equal 0, not 24 like in FX)
// end on

// on ui_control(Reverb_Dry_Slider)
// 	set_text(Reverb_Dry_Value_Label, Reverb_Dry_Slider / modifier_million)
// 	set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, Reverb_Dry_Slider, -1, 7, $NI_MAIN_BUS)		// probably will need modifier to get this fader to work right (only need highest value to equal 0, not 24 like in FX)
// end on


//	Filter Sliders =======================================
//	OLD
// on ui_control(Filter_Cut_Slider)
// 	set_text(Filter_Cut_Value_Label, Filter_Cut_Slider / modifier_million)
// 	Target_All_Group_Inserts($ENGINE_PAR_CUTOFF, Filter_Cut_Slider, Filter_Mode_Switch, -1)
// end on

// on ui_control(Filter_Res_Slider)
// 	set_text(Filter_Res_Value_Label, Filter_Res_Slider / modifier_million)
// 	Target_All_Group_Inserts($ENGINE_PAR_RESONANCE, Filter_Res_Slider, Filter_Mode_Switch, -1)
// end on

//	NEW
on ui_control(Filter_LPF_Cut_Slider)
	set_text(Filter_LPF_Cut_Value_Label, Filter_LPF_Cut_Slider / modifier_million)
	set_engine_par($ENGINE_PAR_CUTOFF, Filter_LPF_Cut_Slider, 0, 0, -1)
end on
on ui_control(Filter_LPF_Res_Slider)
	set_text(Filter_LPF_Res_Value_Label, Filter_LPF_Res_Slider / modifier_million)
	set_engine_par($ENGINE_PAR_RESONANCE, Filter_LPF_Res_Slider, 0, 0, -1)
end on
on ui_control(Filter_HPF_Cut_Slider)
	set_text(Filter_HPF_Cut_Value_Label, Filter_HPF_Cut_Slider / modifier_million)
	set_engine_par($ENGINE_PAR_CUTOFF, Filter_HPF_Cut_Slider, 0, 1, -1)
end on
on ui_control(Filter_HPF_Res_Slider)
	set_text(Filter_HPF_Res_Value_Label, Filter_HPF_Res_Slider / modifier_million)
	set_engine_par($ENGINE_PAR_RESONANCE, Filter_HPF_Res_Slider, 0, 1, -1)
end on

//	NEW but using Target_All_Group_Inserts macro
// on ui_control(Filter_LPF_Cut_Slider)
// 	set_text(Filter_LPF_Cut_Value_Label, Filter_LPF_Cut_Slider / modifier_million)
// 	Target_All_Group_Inserts($ENGINE_PAR_CUTOFF, Filter_LPF_Cut_Slider, 0, -1)
// end on
// on ui_control(Filter_LPF_Res_Slider)
// 	set_text(Filter_LPF_Res_Value_Label, Filter_LPF_Res_Slider / modifier_million)
// 	Target_All_Group_Inserts($ENGINE_PAR_CUTOFF, Filter_LPF_Res_Slider, 0, -1)
// end on
// on ui_control(Filter_HPF_Cut_Slider)
// 	set_text(Filter_HPF_Cut_Value_Label, Filter_HPF_Cut_Slider / modifier_million)
// 	Target_All_Group_Inserts($ENGINE_PAR_CUTOFF, Filter_HPF_Cut_Slider, 1, -1)
// end on
// on ui_control(Filter_HPF_Res_Slider)
// 	set_text(Filter_HPF_Res_Value_Label, Filter_HPF_Res_Slider / modifier_million)
// 	Target_All_Group_Inserts($ENGINE_PAR_CUTOFF, Filter_HPF_Res_Slider, 1, -1)
// end on


//	Filter Mode Switch =======================================
// on ui_control(Filter_Mode_Switch)
// 	Change_Switch_Text(Filter_Mode_Switch, "HPF", "LPF")
// end on


//	Envelope - LPF Filter =======================================
on ui_control(Env_A_Slider)
	set_text(EnvFilter_Value_Attack_Label, Env_A_Slider / modifier_MIDI)
    set_engine_par($ENGINE_PAR_ATTACK, Env_A_Slider, 0, 0, -1)
end on

on ui_control(Env_D_Slider)
	set_text(EnvFilter_Value_Decay_Label, Env_D_Slider / modifier_MIDI)
	set_engine_par($ENGINE_PAR_DECAY, Env_D_Slider, 0, 0, -1)
end on

on ui_control(Env_S_Slider)
	set_text(EnvFilter_Value_Sustain_Label, Env_S_Slider / modifier_MIDI)
	set_engine_par($ENGINE_PAR_SUSTAIN, Env_S_Slider, 0, 0, -1)
end on

on ui_control(Env_R_Slider)
	set_text(EnvFilter_Value_Release_Label, Env_R_Slider / modifier_MIDI)
	set_engine_par($ENGINE_PAR_RELEASE, Env_R_Slider, 0, 0, -1)
end on


// 	Envelope - Amplifier =======================================
on ui_control(Env_A_Slider)
	set_text(Env_A_Label_Value, Env_A_Slider / modifier_MIDI)
    set_engine_par($ENGINE_PAR_ATTACK, Env_A_Slider, 0, 2, -1)	// all below will not compile due to Slot
end on

on ui_control(Env_D_Slider)
	set_text(Env_D_Label_Value, Env_D_Slider / modifier_MIDI)
	set_engine_par($ENGINE_PAR_DECAY, Env_D_Slider, 0, 2, -1)
end on

on ui_control(Env_S_Slider)
	set_text(Env_Value_Sustain_Label, Env_S_Slider / modifier_MIDI)
	set_engine_par($ENGINE_PAR_SUSTAIN, Env_S_Slider, 0, 2, -1)
end on

on ui_control(Env_R_Slider)
	set_text(Env_Value_Release_Label, Env_R_Slider / modifier_MIDI)
	set_engine_par($ENGINE_PAR_RELEASE, Env_R_Slider, 0, 2, -1)
end on


//	=======================================
//	MIDI CC ASSIGNMENTS
//	=======================================
// on controller
// 	if ($CC_NUM = 1)
// 		Filter_Cut_Slider := %CC[$CC_NUM]
// 	end if
// end on
